8. Наследование и завершающие действия
8. Поведение полиморфных методов при вызове из конструкторов
8. Ковариантность возвращаемых типов
8. Наследование при проектировании

Два способа запретить для класса создавать объекты:
а) сделать класс abstract (при этом абстрактных методов может и не быть)
б) private конструктор

Можно объявлять public interface или без спецификатора доступа. Другие спецификаторы недопустимы.
Поля интерфейса автоматически являются static и final. Поля интерфейса по умолчанию являются public (даже если не указывать спецификатор доступа), 
однако при реализации интерфейса еbpго методы должны быть объявлены как public. В противном случае будет использоваться доступ в пределах пакета, 
а это приведет к уменьшению уровня доступа во время наследования, что запрещается компилятором java.

Отделение интерфейса от реализации позволяет применять интерфейс к разным реа- 
лизациям, а следовательно, расширяет возможности повторного использования кода.

Помните, что главная причина введения в язык интерфейсов представлена в приведен- 
ном примере: это возможность выполнять восходящее преобразование к нескольким  
базовым типам. Вторая причина для использования интерфейсов совпадает с предна- 
значением абстрактных классов: запретить программисту-клиенту создание объектов  
этого класса + повторное использование кода с помощью паттерна адаптер

9. Вложенные интрфейсы
9. Интерфейсы и фабрики

Чтобы создать объект внутреннего класса, обязательно должен существовать объ- 
ект внешнего класса. Это объясняется тем, что объект внутреннего класса незаметно  
связывается с объектом внешнего класса, на базе которого он был создан. С другой  
стороны, при создании вложенного класса (статического внутреннего класса) ссылка  
на объект внешнего класса не нужна.

Вложенные классы имеют доступ к private полям и методам объемлющего класса.

10. .this и .new
10. Внутренние классы и восходящее преобразование